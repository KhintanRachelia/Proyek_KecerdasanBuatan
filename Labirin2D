from collections import deque

maze = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0]
]

start = (0, 0)
goal = (4, 4)

def get_neighbors(pos):
    neighbors = []
    directions = [(-1,0), (1,0), (0,-1), (0,1)]  
    for d in directions:
        new_row = pos[0] + d[0]
        new_col = pos[1] + d[1]
        if 0 <= new_row < len(maze) and 0 <= new_col < len(maze[0]):
            if maze[new_row][new_col] == 0:
                neighbors.append((new_row, new_col))
    return neighbors

def bfs(start, goal):
    queue = deque([[start]])
    visited = set()

    while queue:
        path = queue.popleft()
        node = path[-1]

        if node == goal:
            return path

        if node not in visited:
            for neighbor in get_neighbors(node):
                new_path = list(path)
                new_path.append(neighbor)
                queue.append(new_path)

            visited.add(node)
    return None

shortest_path = bfs(start, goal)
print("Jalur terpendek:", shortest_path)
